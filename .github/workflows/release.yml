name: Build and Release

on:
  push:
    tags:
      - 'v*.*.*'  # 触发条件：推送版本标签 (如 v2.1.0)
  workflow_dispatch:  # 手动触发

jobs:
  build-windows:
    runs-on: windows-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller
        
    - name: Build executable
      run: |
        python build_exe.py
        
    - name: Get version from tag
      id: get_version
      run: |
        if ($env:GITHUB_REF -match "refs/tags/(.*)") {
          $version = $matches[1]
        } else {
          $version = "latest"
        }
        echo "version=$version" >> $env:GITHUB_OUTPUT
        echo "Version: $version"
      shell: powershell
      
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.get_version.outputs.version }}
        release_name: 节点配置转换工具 ${{ steps.get_version.outputs.version }}
        body: |
          ## 🚀 节点配置转换工具 ${{ steps.get_version.outputs.version }}
          
          ### ✨ 功能特色
          - **三向转换支持**：Clash YAML ⇄ V2rayN 链接 + V2Ray Config.json
          - **现代化GUI界面**：三种转换模式颜色区分
          - **智能格式检测**：自动识别输入内容类型
          - **协议支持**：VMess、VLESS、SS、Trojan、Hysteria2
          
          ### 📦 下载说明
          - **Windows用户**：下载 `节点转换工具-${{ steps.get_version.outputs.version }}.exe`
          - **其他平台**：下载源码，使用 `python yaml_to_v2rayn.py` 运行
          
          ### 🔧 使用方法
          1. 双击运行exe文件（Windows）
          2. 选择转换方向（三种模式）
          3. 粘贴配置内容
          4. 点击转换并复制结果
          
          ### ⚠️ 注意事项
          - 本工具仅供学习和研究使用
          - 请确保您有合法权限使用相关网络服务
          
          ---
          **完整更新日志请查看 [CHANGELOG.md](CHANGELOG.md)**
        draft: false
        prerelease: false
        
    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./dist/节点转换工具-v2.1.exe
        asset_name: 节点转换工具-${{ steps.get_version.outputs.version }}.exe
        asset_content_type: application/octet-stream
        
  build-linux:
    runs-on: ubuntu-latest
    needs: build-windows
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller
        
    - name: Build executable (Linux)
      run: |
        pyinstaller --name="node-config-converter" --onefile --clean yaml_to_v2rayn.py
        
    - name: Get version from tag
      id: get_version
      run: |
        if [[ $GITHUB_REF == refs/tags/* ]]; then
          echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        else
          echo "version=latest" >> $GITHUB_OUTPUT
        fi
        
    - name: Upload Linux Binary
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.build-windows.outputs.upload_url }}
        asset_path: ./dist/node-config-converter
        asset_name: node-config-converter-linux-${{ steps.get_version.outputs.version }}
        asset_content_type: application/octet-stream
        
  build-macos:
    runs-on: macos-latest
    needs: build-windows
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller
        
    - name: Build executable (macOS)
      run: |
        pyinstaller --name="node-config-converter" --onefile --clean yaml_to_v2rayn.py
        
    - name: Get version from tag
      id: get_version
      run: |
        if [[ $GITHUB_REF == refs/tags/* ]]; then
          echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        else
          echo "version=latest" >> $GITHUB_OUTPUT
        fi
        
    - name: Upload macOS Binary
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.build-windows.outputs.upload_url }}
        asset_path: ./dist/node-config-converter
        asset_name: node-config-converter-macos-${{ steps.get_version.outputs.version }}
        asset_content_type: application/octet-stream